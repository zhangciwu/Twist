#! /bin/bash

export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

date="$(date +%Y-%m-%d-%H:%M:%S)"

function shadowsocksconfig(){
    SSLOCAL="[\"[::0]\",\"0.0.0.0\"]"
    PORT="443"
    LOACL="127.0.0.1"
    LOCALPORT="1080"
    PASSWORD=""
    DNS="8.8.8.8"
    TIMEOUT="600"
    METHOD="xchacha20-ietf-poly1305"
    OBFS="tls"
    OBFSHOST="mzstatic.com"
    OBFSURI="/"
    BBR="enable"
    FWS="enable"
    ABB="enable"
}

function systemconfig(){
    IPREGEX="^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
    ETH=""
    PUBLICIP=""
    PUBLICIPv6=""
}

function install_twist(){
    clear
    twist
    notice
    rootness
    disableselinux
    if grep -qs "Twist" /etc/sysctl.conf; then
        OVERWRITE="ture"
    fi
    shadowsocksconfig
    systemconfig
    detectsystem
    installlibs
    configbbr
    installsslibev
    configsslibev
    configiptables
    startservices
    twiststatus
}

function update_twist(){
    clear
    twist
    echo -e "#[\033[32;1m                 Update Twist Shadowsocks-libev                   \033[0m]#"
    echo -e "#[\033[32;1m                 Update will Start in 5 Seconds                   \033[0m]#"
    echo "######################################################################"
    echo ""
    sleep 5
    rootness
    systemconfig
    if [ -e /etc/init.d/shadowsocks ]; then
        /etc/init.d/shadowsocks stop
        echo ""
        sleep 2
        if [ -f /usr/local/bin/ss-server ]; then
            ssinstallpath="/usr/local/bin"
        else
            ssinstallpath="/usr/bin"
        fi
    else
        echo -e "#[\033[31;1m              Twist was not found on Your Server!                 \033[0m]#"
        echo ""
        exit 1
    fi
    rm -f ${ssinstallpath}/obfs-local
    rm -f ${ssinstallpath}/obfs-server
    rm -f ${ssinstallpath}/ss-local
    rm -f ${ssinstallpath}/ss-tunnel
    rm -f ${ssinstallpath}/ss-server
    rm -f ${ssinstallpath}/ss-manager
    rm -f ${ssinstallpath}/ss-redir
    rm -f ${ssinstallpath}/ss-nat
    rm -f /usr/local/lib/libshadowsocks-libev.a
    rm -f /usr/local/lib/libshadowsocks-libev.la
    rm -f /usr/local/lib/pkgconfig/shadowsocks-libev.pc
    rm -f /usr/local/include/shadowsocks.h
    rm -f /usr/local/share/man/man1/ss-local.1
    rm -f /usr/local/share/man/man1/ss-tunnel.1
    rm -f /usr/local/share/man/man1/ss-server.1
    rm -f /usr/local/share/man/man1/ss-manager.1
    rm -f /usr/local/share/man/man1/ss-redir.1
    rm -f /usr/local/share/man/man1/ss-nat.1
    rm -f /usr/local/share/man/man8/shadowsocks-libev.8
    rm -fr /usr/local/share/doc/shadowsocks-libev
    disableselinux
    detectsystem
    installlibs
    installsslibev
    echo ""
    startservices
    sleep 2
    clear
    twist
    echo -e "#[\033[32;1m                      Twist Update Finished                       \033[0m]#"
    echo "######################################################################"
    echo ""
    exit 1
}

function uninstall_twist(){
    clear
    twist
    echo -e "#[\033[31;1m               Uninstall Twist Shadowsocks-libev                  \033[0m]#"
    echo -e "#[\033[31;1m               Uninstall will Start in 5 Seconds                  \033[0m]#"
    echo "######################################################################"
    echo ""
    sleep 5
    rootness
    if [ -e /etc/init.d/shadowsocks ]; then
        /etc/init.d/shadowsocks stop
        echo ""
        sleep 2
        if [ -f /usr/local/bin/ss-server ]; then
            ssinstallpath="/usr/local/bin"
        else
            ssinstallpath="/usr/bin"
        fi
    else
        echo -e "#[\033[31;1m             Twist was not found on Your Server!                  \033[0m]#"
        echo ""
        exit 1
    fi
    if grep -Eqi "Ubuntu|Debian|Raspbian|Arch Linux" /etc/*-release || grep -Eqi "Ubuntu|Debian|Raspbian|Arch Linux" /proc/version; then
        update-rc.d -f shadowsocks remove
        iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport $PORT -j DROP
        iptables -I INPUT -m state --state NEW -m udp -p udp --dport $PORT -j DROP
    elif grep -Eqi "CentOS|Red Hat|Fedora" /etc/*-release || grep -Eqi "CentOS|Red Hat|Fedora" /proc/version; then
        chkconfig --del shadowsocks
        firewall-cmd --permanent --zone=public --remove-port=${PORT}/tcp
        firewall-cmd --permanent --zone=public --remove-port=${PORT}/udp
        firewall-cmd --reload
    fi
    ps -ef | grep -v grep | grep -i "ss-server"
    update-rc.d -f shadowsocks remove
    rm -f /usr/bin/twist
    rm -f ${ssinstallpath}/obfs-local
    rm -f ${ssinstallpath}/obfs-server
    rm -f ${ssinstallpath}/ss-local
    rm -f ${ssinstallpath}/ss-tunnel
    rm -f ${ssinstallpath}/ss-server
    rm -f ${ssinstallpath}/ss-manager
    rm -f ${ssinstallpath}/ss-redir
    rm -f ${ssinstallpath}/ss-nat
    rm -f /usr/local/lib/libshadowsocks-libev.a
    rm -f /usr/local/lib/libshadowsocks-libev.la
    rm -f /usr/local/lib/pkgconfig/shadowsocks-libev.pc
    rm -f /usr/local/include/shadowsocks.h
    rm -f /usr/local/share/man/man1/ss-local.1
    rm -f /usr/local/share/man/man1/ss-tunnel.1
    rm -f /usr/local/share/man/man1/ss-server.1
    rm -f /usr/local/share/man/man1/ss-manager.1
    rm -f /usr/local/share/man/man1/ss-redir.1
    rm -f /usr/local/share/man/man1/ss-nat.1
    rm -f /usr/local/share/man/man8/shadowsocks-libev.8
    rm -fr /usr/local/share/doc/shadowsocks-libev
    rm -fr /etc/shadowsocks-libev
    rm -f /etc/init.d/shadowsocks
    [ ! -d /etc/twistbackup ] && mkdir -p /etc/twistbackup
    [ -e /etc/twistbackup/sysctl.conf ] && { cp -f "/etc/twistbackup/sysctl.conf" "/etc/sysctl.conf"; sysctl -e -p; }
    [ -e /etc/twistbackup/limits.conf ] && cp -f "/etc/twistbackup/limits.conf" "/etc/security/limits.conf"
    [ -e /etc/twistbackup/login ] && cp -f "/etc/twistbackup/login" "/etc/pam.d/login"
    [ -e /etc/twistbackup/iptables.rules ] && { cp -f "/etc/twistbackup/iptables.rules" "/etc/iptables.rules"; iptables-restore < /etc/iptables.rules; }
    [ -e /etc/twistbackup/rules.v6 ] && { cp -f "/etc/twistbackup/rules.v6" "/etc/iptables/rules.v6"; iptables-restore < /etc/iptables/rules.v6; }
    if [ -e /etc/ip6tables.rules ]; then
        [ -e /etc/twistbackup/rules.v6 ] && cp -f "/etc/twistbackup/rules.v6" "/etc/ip6tables.rules"
    fi
    if [ -e /etc/twistbackup/iptablesload ]; then
        cp -f "/etc/twistbackup/iptablesload" "/etc/network/if-pre-up.d/iptablesload"
    else
        rm -f /etc/network/if-pre-up.d/iptablesload
    fi
    if [ -e /etc/twistbackup/ip6tablesload ]; then
        cp -f "/etc/twistbackup/ip6tablesload" "/etc/network/if-pre-up.d/ip6tablesload"
    else
        rm -f /etc/network/if-pre-up.d/ip6tablesload
    fi
    [ -e /etc/twistbackup/jail.local ] && cp -f "/etc/twistbackup/jail.local" "/etc/fail2ban/jail.local"
    [ -e /etc/twistbackup/rc.local ] && cp -f "/etc/twistbackup/rc.local" "/etc/rc.local"
    [ -e /etc/twistbackup/twist ] && cp -f "/etc/twistbackup/twist" "/usr/bin/twist"
    [ -e /etc/twistbackup/twistprotect ] && cp -f "/etc/twistbackup/twistprotect" "/root/twistprotect"
    [ -e /etc/twistbackup/.htaccess ] && cp -f "/etc/twistbackup/.htaccess" "/var/www/html/.htaccess"
    [ -e /etc/twistbackup/index.html ] && cp -f "/etc/twistbackup/index.html" "/var/www/html/index.html"
    rm -fr /etc/twistbackup
    sed -i "/twistprotect/d" /etc/crontab
    rm -f /root/twistprotect
    sed -i "/# Twist/d" /etc/sysctl.conf
    if [ "$packagemanagertype" = "p" ]; then
        systemctl restart cronie.service
    else
        systemctl restart cron.service
    fi
    service fail2ban restart
    systemctl restart apache2
    ldconfig
    clear
    twist
    echo -e "#[\033[32;1m                Twist Uninstallation Finished                     \033[0m]#"
    echo "######################################################################"
    echo ""
    exit 1
}

function twist(){
    echo "######################################################################"
    echo "#####################################################################"
    echo "       ###       ###         ###     ###      #########    #########"
    echo "       ###        ###    #  ###     ###      ##               ##"
    echo "       ###         ###  ## ###     ###      #########        ##"
    echo "       ###          ### ## ##     ###             ##        ##"
    echo "       ###           ### ###     ###      #########        ##"
    echo ""
}

function notice(){
    echo -e "#[\033[32;1m         Install Shadowsocks-libev Script By Unbinilium           \033[0m]#"
    echo -e "#[\033[32;1m             Installation will Start in 5 Seconds                 \033[0m]#"
    echo "######################################################################"
    echo ""
    sleep 5
}

function rootness(){
    if [ "$(id -u)" != 0 ]; then
        echo -e "# [\033[31;1mError:Twist must run by root. Please run Twist with root access! \033[0m]"
        echo ""
        exit 1
    fi
}

function disableselinux(){
    [ -z "$(which grep)" ] && { echo ""; echo -e "# [\033[31;1mTwist requires the basic dependencies\033[0m \033[32;1mgrep\033[0m, \033[31;1mPlease Install the Dependencies first. \033[0m]"; echo ""; exit 1; }
    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then
        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
        setenforce 0
    fi
}

function detectsystem(){
    if grep -Eqi "Ubuntu|Debian|Raspbian|Arch Linux" /etc/*-release || grep -Eqi "Ubuntu|Debian|Raspbian|Arch Linux" /proc/version; then
        systemtype="1"
    elif grep -Eqi "CentOS|Red Hat|Fedora" /etc/*-release || grep -Eqi "CentOS|Red Hat|Fedora" /proc/version; then
        systemtype="0"
    else
        echo -e "# [\033[31;1mTwist could only run on Ubuntu, Debian, Raspbian, Arch Linux, CentOS, Red Hat or Fedora. Aborating! \033[0m]"
        echo ""
        exit 1
    fi
    if [ ! -z "$(which apt)" ]; then
        packagemanagertype="a"
    elif [ ! -z "$(which yum)" ]; then
        packagemanagertype="y"
    elif [ ! -z "$(which pacman)" ]; then
        packagemanagertype="p"
    else
        echo -e "# [\033[31;1mTwist could only run on Ubuntu, Debian, Raspbian, Arch Linux, CentOS, Red Hat or Fedora. Aborating! \033[0m]"
        echo ""
        exit 1
    fi
    if [ -f /proc/user_beancounters ]; then
        BBR="disable"
        if [ "$packagemanagertype" = "a" ]; then
            systemtype="1"
        elif [ "$packagemanagertype" = "y" ]; then
            systemtype="0"
        elif [ "$packagemanagertype" = "p" ]; then
            systemtype="1"
        fi
    fi
    if [ "$packagemanagertype" = "a" ]; then
        tries="0"
        while fuser /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock; do
            [ "$tries" = "0" ] && { echo ""; echo -e "# [\033[31;1mTrying to lock the Administration Directory, another Process may using it. \033[0m]"; echo ""; }
            [ "$tries" = "20" ] && { rm -f /var/lib/apt/lists/lock; rm -f /var/cache/apt/archives/lock; rm -f /var/lib/dpkg/lock; }
            [ "$tries" = "21" ] && dpkg --configure -a
            [ "$tries" -ge "22" ] && { echo ""; echo -e "# [\033[31;1mUnable to lock the Administration Directory. \033[0m]"; echo ""; break; }
            tries=$((tries+1))
            sleep 3
        done
    fi
    if [ -z "$(which awk)" ] || [ -z "$(which route)" ] || [ -z "$(which ip)" ] || [ -z "$(which dig)" ] || [ -z "$(which curl)" ]; then
        if [ "$packagemanagertype" = "a" ]; then
            apt-get update || { echo ""; echo -e "# [\033[31;1mCannot Update Source, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
            apt-get -yq install gawk curl net-tools dnsutils || { echo ""; echo -e "# [\033[31;1mCannot Install Dependencies, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        elif [ "$packagemanagertype" = "y" ]; then
            yum -y update || { echo ""; echo -e "# [\033[31;1mCannot Update Source, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
            yum -y install gawk curl net-tools bind-utils || { echo ""; echo -e "# [\033[31;1mCannot Install Dependencies, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        else
            pacman -Syyu --noconfirm || { echo ""; echo -e "# [\033[31;1mCannot Update Source, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
            pacman -Syu --noconfirm gawk curl net-tools || { echo ""; echo -e "# [\033[31;1mCannot Install Dependencies, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        fi
        clear
    fi
    MAKECORES="$(grep -c ^processor /proc/cpuinfo)"
    [ -z "$MAKECORES" ] && MAKECORES="1"
    kernelverheader="$(uname -r | grep -oE '[0-9]+\.[0-9]+')"
    if [ $(echo ${kernelverheader} | awk -v ver=4.10 '{print($1>ver)? "1":"0"}') -eq "0" ]; then
        [ "$BBR" = "enable" ] && serverrestart="true"
    fi
    if [ -z "$ETH" ]; then
        ETH="$(route | grep '^default' | grep -o '[^ ]*$')"
        [ -z "$ETH" ] && ETH="$(ip -4 route list 0/0 | grep -Po '(?<=dev )(\S+)')"
        ETH="$(echo "$ETH" | xargs | awk '{print $1}')"
    fi
    ethstatus="$(cat /sys/class/net/${ETH}/operstate)"
    if [ -z "$ethstatus" ] || [ "$ethstatus" = "down" ]; then
        echo -e "# [\033[31;1mNetwork Interface '${ETH}' is not available. Please try another Network Interface listed below! \033[0m]"
        echo ""
        ip link
        echo ""
        echo -e "Please Enter [\033[32;1mNetwork Interface Name\033[0m]:"
        read -p "Input Interface Name:" eth
     	if [ ! "$eth" = "" ]; then
            ethstatus="$(cat /sys/class/net/${eth}/operstate)"
            if [ -z "$ethstatus" ] || [ "$ethstatus" = "down" ]; then
                echo ""
                echo -e "# [\033[31;1mThe Network Interface Your entered is not available. Aborting! \033[0m]"
                echo ""
                exit 1
            else
                ETH="$eth"
                echo ""
                echo -e "# [\033[33;1mNetwork Interface check passed, Using the new Interface\033[0m \033[32;1m${ETH} \033[0m]"
                echo ""
            fi
        fi
    fi
    [ -z "$PUBLICIP" ] && PUBLICIP="$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)"
    if ! printf %s "$PUBLICIP" | grep -Eq "$IPREGEX"; then
        echo ""
        echo -e "# [\033[31;1mCannot detect a valid Public IP. Please fill your Public IP address below! \033[0m]"
        read -p "Input Your Public IP:" publicip
        if ! printf %s "$publicip" | grep -Eq "$IPREGEX"; then
            echo ""
            echo -e "# [\033[31;1mThe IP:${publicip} address you entered is not vailed. You may unable to connect! \033[0m]"
            echo ""
            sleep 3
        else
            PUBLICIP="$publicip"
            echo ""
            echo -e "# [\033[32;1mYou are now using Public IP:${PUBLICIP} \033[0m]"
            echo ""
        fi
    fi
    [ -z "$(ip -6 addr show ${ETH})" ] && { SSLOCAL="\"0.0.0.0\""; AddrV6="false"; }
    [ -z "$PUBLICIPv6" ] && PUBLICIPv6="$(curl -s diagnostic.opendns.com/myip)"
    [ -z "$PUBLICIPv6" ] && AddrV6="false"
    [ "$PUBLICIPv6" = "$PUBLICIP" ] && AddrV6="false"
}

function installlibs(){
    if [ "$packagemanagertype" = "a" ]; then
        apt-get -yq update || { echo ""; echo -e "# [\033[31;1mCannot Update Source, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        apt-get -yq upgrade || { echo ""; echo -e "# [\033[31;1mCannot Upgrade Source, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        apt-get -yq install wget gawk grep curl sed git gcc swig gettext autoconf automake make libtool perl cpio xmlto asciidoc cron fail2ban net-tools dnsutils rng-tools libc-ares-dev libev-dev openssl libssl-dev zlib1g-dev libpcre3-dev libevent-dev build-essential python-dev python-pip python-setuptools python-m2crypto
        [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot Install Dependencies, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        [ "$FWS" = "enable" ] && { apt-get -yq install apache2 || { echo ""; echo -e "# [\033[31;1mCannot Install Apache to fake as a web server, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }; }
    elif [ "$packagemanagertype" = "y" ]; then
        yum -y update || { echo ""; echo -e "# [\033[31;1mCannot Update Source, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        yum -y upgrade || { echo ""; echo -e "# [\033[31;1mCannot Upgrade Source, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        [ -e /etc/yum.repos.d/epel.repo ] || { yum -y install epel-release yum-utils || { echo -e "# [\033[31;1mCannot add EPEL repository. Aborting! \033[0m]"; exit 1; }; }
        yum -y install wget gawk grep curl sed git gcc swig gettext-devel autoconf automake make libtool pcre-devel perl-devel cpio xmlto asciidoc vixie-cron crontabs fail2ban net-tools bind-utils rng-tools expat-devel openssl-devel zlib-devel libev-devel c-ares-devel python-devel python-setuptools python-pip
        [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot Install Dependencies, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        [ "$FWS" = "enable" ] && { yum -y install httpd || { echo ""; echo -e "# [\033[31;1mCannot Install Apache to fake as a web server, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }; }
    else
        pacman -Syyu --noconfirm || { echo ""; echo -e "# [\033[31;1mCannot Update Source, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        pacman -Syu --noconfirm wget gawk grep curl sed git gcc swig gettext autoconf automake make libtool pcre perl cpio xmlto asciidoc cronie fail2ban net-tools rng-tools openssl zlib c-ares libev python-devel python-setuptools python-pip python2-m2crypto
        [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot Install Dependencies, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }
        [ "$FWS" = "enable" ] && { pacman -Syu --noconfirm apache || { echo ""; echo -e "# [\033[31;1mCannot Install Apache to fake as a web server, Please check your network or errors displayed! \033[0m]"; echo ""; exit 1; }; }
    fi
    pip install -q qrcode || { echo ""; echo -e "# [\033[31;1mCannot Install QRCore, You may unable to configure clients by QRCode! \033[0m]"; echo ""; sleep 3; }
}

function configbbr(){
    if [ "$BBR" = "enable" ]; then
        cp -f "/etc/sysctl.conf" "/etc/twistbackup/sysctl.conf"
        if [ $(echo ${kernelverheader} | awk -v ver=4.9 '{print($1>ver)? "1":"0"}') -eq "1" ] || [ "$kernelupdated" = "true" ]; then
            if [ ! "$(sysctl net.ipv4.tcp_available_congestion_control | awk '{print $3}')" = "bbr" ]; then
                sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
                echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
            fi
        else
            echo "net.ipv4.tcp_congestion_control = hybla" >> /etc/sysctl.conf
            if grep -Eqi "Ubuntu|Arch Liunx|CentOS|Red Hat" /etc/*-release || grep -Eqi "Ubuntu|Arch Liunx|CentOS|Red Hat" /proc/version; then
                updatekernel
            else
                echo ""
                echo -e "# [\033[34;1mYou may Update Server Kernel and Enable BBR Manually. Aborting! \033[0m]"
                BBR="disable"
                sleep 3
            fi
        fi
    fi
}

function updatekernel(){
    if [ "$packagemanagertype" = "a" ]; then
        KERNELVER="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/ | awk -F'\"v' '/v[4-9]./{print $2}' | cut -d/ -f1 | grep -v -  | sort -V | tail -1)"
        [ -z "$KERNELVER" ] && { BBR="disable"; echo -e "# [\033[31;1mCannot get the newest Linux Kernel Verison, BBR will not enable on your server! \033[0m]"; }
        if [ "$BBR" = "enable" ]; then
            SYSTYPE="$(dpkg --print-architecture)"
            [ "$SYSTYPE" = "amd64" ] && KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/amd64.deb/{print $2}' | cut -d'<' -f1 | head -1)"
            [ "$SYSTYPE" = "i386" ] && KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/i386.deb/{print $2}' | cut -d'<' -f1 | head -1)"
            [ "$SYSTYPE" = "armhf" ] && KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/armhf.deb/{print $2}' | cut -d'<' -f1 | head -1)"
            [ "$SYSTYPE" = "arm64" ] && KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/arm64.deb/{print $2}' | cut -d'<' -f1 | head -1)"
            [ "$SYSTYPE" = "ppc64el" ] && KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/ppc64el.deb/{print $2}' | cut -d'<' -f1 | head -1)"
            [ "$SYSTYPE" = "s390x" ] && KERNEL="$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/ | grep "linux-image" | grep "generic" | awk -F'\">' '/s390x.deb/{print $2}' | cut -d'<' -f1 | head -1)"
            [ -z "$KERNEL" ] && { echo ""; echo -e "[# \033[31;1mUnable to get new Kernel Url, BBR will not enable on your server! \033[0m]"; echo ""; sleep 3; BBR="disable"; }
            [ "$BBR" = "enable" ] && wget -t 3 -T 30 -nv -O "$KERNEL" "http://kernel.ubuntu.com/~kernel-ppa/mainline/v${KERNELVER}/${KERNEL}" || { echo ""; echo -e "# [\033[31;1mCannot Download new Linux Kernel, Please check your network or errors displayed, BBR will not enable on your server! \033[0m]"; echo ""; sleep 3; BBR="disable"; }
            [ "$BBR" = "enable" ] && { dpkg -i $KERNEL || { echo ""; echo -e "# [\033[31;1mCannot Update Kernel, BBR will not enable on your server! \033[0m]"; echo ""; sleep 3; BBR="disable"; }; }
            [ "$BBR" = "enable" ] && { dpkg -l | grep linux-image; rm -f $KERNEL; update-grub; }
        fi
    elif [ "$packagemanagertype" = "y" ]; then
        rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org || { echo ""; echo -e "# [\033[31;1mCannot Get ELRepo Key, you may unable to Install ELRepo Packages! \033[0m]"; echo ""; sleep 3; }
        if grep -qs "release 7" /etc/*-release; then
            rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm || { echo ""; echo -e "# [\033[31;1mCannot Install ELRepo Repository. Aborting! \033[0m]"; echo ""; sleep 3; BBR="disable"; }
            [ "$BBR" = "enable" ] && yum --enablerepo=elrepo-kernel install kernel-ml kernel-ml-devel || { echo ""; echo -e "# [\033[31;1mCannot Update Kernel, BBR will not enable on your server! \033[0m]"; echo ""; sleep 3; BBR="disable"; }
            [ "$BBR" = "enable" ] && grub2-set-default 0
        elif grep -qs "release 6" /etc/*-release; then
            rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm || { echo ""; echo -e "# [\033[31;1mCannot Install ELRepo Repository. Aborting! \033[0m]"; echo ""; sleep 3; BBR="disable"; }
            [ "$BBR" = "enable" ] && yum --enablerepo=elrepo-kernel install kernel-ml kernel-ml-devel || { echo ""; echo -e "# [\033[31;1mCannot Update Kernel, BBR will not enable on your server! \033[0m]"; echo ""; sleep 3; BBR="disable"; }
            [ "$BBR" = "enable" ] && sed -i 's/^default=.*/default=0/g' /boot/grub/grub.conf
        fi
    elif [ "$packagemanagertype" = "p" ]; then
        if grep -Eqi "IgnorePkg|IgnoreGroup" /etc/pacman.conf; then
            sed -i "/IgnorePkg/d;/IgnoreGroup/d" /etc/pacman.conf
        fi
        pacman -Syyu --noconfirm || { echo ""; echo -e "# [\033[31;1mCannot Update Kernel and Sources, BBR will not enable on your server! \033[0m]"; echo ""; sleep 3; BBR="disable"; }
    fi
    [ "$BBR" = "enable" ] && { kernelupdated="true"; serverrestart="true"; }
    kernelverheader="$(uname -r | grep -oE '[0-9]+\.[0-9]+')"
    configbbr
}

function installsslibev(){
    libsodiumver="$(wget -qO- https://api.github.com/repos/jedisct1/libsodium/releases/latest | grep 'tag_name' | cut -d\" -f4)"
    wget -t 3 -T 30 -nv -O libsodium-${libsodiumver}.tar.gz https://github.com/jedisct1/libsodium/releases/download/${libsodiumver}/libsodium-${libsodiumver}.tar.gz
    [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot download libsodium source. Aborting! \033[0m]"; echo ""; exit 1; }
    [ -d libsodium-${libsodiumver} ] && rm -rf libsodium-${libsodiumver}
    tar zxf libsodium-${libsodiumver}.tar.gz
    pushd libsodium-${libsodiumver}
    ./configure --prefix=/usr && make "-j$((MAKECORES+1))" && make install || { echo ""; echo －e "# [\033[31;1mlibsodium failed to build. Aborting! \033[0m]"; echo ""; exit 1; }
    popd
    if ! ldconfig -p | grep -wq "/usr/lib"; then
        echo "/usr/lib" > /etc/ld.so.conf.d/lib.conf
    fi
    ldconfig
    mbedver="2.6.0"
    wget -t 3 -T 30 -nv -O mbedtls-${mbedver}-gpl.tgz https://tls.mbed.org/download/mbedtls-${mbedver}-gpl.tgz
    [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot download mbed source. Aborting! \033[0m]"; echo ""; exit 1; }
    [ -d mbedtls-${mbedver} ] && rm -rf mbedtls-${mbedver}
    tar xf mbedtls-${mbedver}-gpl.tgz
    pushd mbedtls-${mbedver}
    make SHARED=1 CFLAGS=-fPIC "-j$((MAKECORES+1))" && make DESTDIR=/usr install || { echo ""; echo －e "# [\033[31;1mmbed failed to build. Aborting! \033[0m]"; echo ""; exit 1; }
    popd
    ldconfig
    sslibevtag="$(wget -qO- https://api.github.com/repos/shadowsocks/shadowsocks-libev/releases/latest | grep 'tag_name' | cut -d\" -f4)"
    sslibevver="shadowsocks-libev-$(echo ${sslibevtag} | sed -e 's/^[a-zA-Z]//g')"
    wget -t 3 -T 30 -nv -O ${sslibevver}.tar.gz https://github.com/shadowsocks/shadowsocks-libev/releases/download/${sslibevtag}/${sslibevver}.tar.gz
    [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot download shadowsocks-libev source. Aborting! \033[0m]"; echo ""; exit 1; }
    [ -d ${sslibevver} ] && rm -rf $sslibevver
    tar zxf ${sslibevver}.tar.gz
    pushd $sslibevver
    ./configure
    make "-j$((MAKECORES+1))" && make install || { echo ""; echo －e "# [\033[31;1mshadowsocks-libev failed to build. Aborting! \033[0m]"; echo ""; exit 1; }
    popd
    ldconfig
    [ -d simple-obfs ] && rm -rf simple-obfs
    git clone https://github.com/shadowsocks/simple-obfs.git
    [ "$?" != "0" ] && { echo ""; echo -e "# [\033[31;1mCannot clone simple-obfs source. Aborting! \033[0m]"; echo ""; exit 1; }
    pushd simple-obfs
    git submodule update --init --recursive
    ./autogen.sh
    ./configure
    make "-j$((MAKECORES+1))" && make install || { echo ""; echo －e "# [\033[31;1mSimple-obfs failed to build. Aborting! \033[0m]"; echo ""; exit 1; }
    popd
    ldconfig
    [ -f /usr/local/bin/obfs-server ] && ln -s /usr/local/bin/obfs-server /usr/bin
    rm -rf libsodium-${libsodiumver}.tar.gz libsodium-${libsodiumver} mbedtls-${mbedver}-gpl.tgz mbedtls-${mbedver} ${sslibevver}.tar.gz $sslibevver simple-obfs
}

function configsslibev(){
    OBFSLOCAL="obfs-host"
    OBFSURL=";obfs-uri=${OBFSURI}"
    [ "$FWS" = "enable" ] && OBFSLOCAL="failover"
    [ -z "$OBFSURI" ] && OBFSURL=""
    [ "$OBFSURI" = "/" ] && OBFSURL=""
    [ -z "$PASSWORD" ] && PASSWORD="$(< /dev/urandom tr -dc 'A-HJ-NPR-Za-km-z2-9' | head -c 32)"
    [ -d /etc/twistbackup ] || mkdir -p /etc/twistbackup
    [ -d /etc/shadowsocks-libev ] || mkdir -p /etc/shadowsocks-libev
    [ -e /etc/shadowsocks-libev/config.json ] && cp -f "/etc/shadowsocks-libev/config.json" "/etc/twistbackup/config.json.old-${date}"
    cat > /etc/shadowsocks-libev/config.json <<-EOF
{
    "server":${SSLOCAL},
    "server_port":${PORT},
    "local_address":"${LOACL}",
    "local_port":${LOCALPORT},
    "password":"${PASSWORD}",
    "nameserver":"${DNS}",
    "timeout":${TIMEOUT},
    "udp_timeout":${TIMEOUT},
    "method":"${METHOD}",
    "plugin":"obfs-server",
    "plugin_opts":"obfs=${OBFS};fast-open;${OBFSLOCAL}=${OBFSHOST}${OBFSURL}",
    "mode":"tcp_and_udp",
    "fast_open":true,
}
EOF
    if ! grep -qs "Twist" /etc/sysctl.conf; then
        [ -e /etc/twistbackup/sysctl.conf ] || cp -f "/etc/sysctl.conf" "/etc/twistbackup/sysctl.conf"
        cp -f "/etc/sysctl.conf" "/etc/twistbackup/sysctl.conf.old-${date}"
        cat >> /etc/sysctl.conf <<-EOF

# Twist
fs.file-max = 1024000
kernel.msgmnb = 65536
kernel.msgmax = 65536
kernel.shmall = 4294967296
kernel.shmmax = 68719476736
net.core.rmem_max = 12582912
net.core.wmem_max = 12582912
net.core.default_qdisc = fq
net.ipv4.ip_forward = 1
net.ipv4.ip_local_port_range = 2000 65535
net.ipv4.tcp_rmem = 10240 87380 12582912
net.ipv4.tcp_wmem = 10240 87380 12582912
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_tw_reuse = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_keepalive_time = 1200
net.ipv4.tcp_mtu_probing = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.conf.all.accept_source_route = 1
net.ipv4.conf.default.accept_source_route = 1
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.conf.lo.send_redirects = 0
net.ipv4.conf.${ETH}.send_redirects = 0
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.lo.rp_filter = 0
net.ipv4.conf.${ETH}.rp_filter = 0
net.ipv4.icmp_echo_ignore_broadcasts = 1
net.ipv4.icmp_ignore_bogus_error_responses = 1
net.ipv6.conf.all.forwarding = 1
net.ipv6.conf.all.accept_source_route = 1
net.ipv6.conf.default.accept_source_route = 1
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0
net.ipv6.conf.all.autoconf = 1
net.ipv6.conf.all.accept_ra = 2
net.ipv6.conf.${ETH}.accept_ra = 2

EOF
        cp -f "/etc/security/limits.conf" "/etc/twistbackup/limits.conf"
        cp -f "/etc/security/limits.conf" "/etc/twistbackup/limits.conf.old-${date}"
        echo "*                soft    nofile           512000" >> /etc/security/limits.conf
        echo "*                hard    nofile          1024000" >> /etc/security/limits.conf
        echo "" >> /etc/security/limits.conf
        if ! grep -qs "pam_limits.so" /etc/pam.d/login; then
            cp -f "/etc/pam.d/login" "/etc/twistbackup/login"
            cp -f "/etc/pam.d/login" "/etc/twistbackup/login.old-${date}"
            [ "$systemtype" = "0" ] && echo "session    required     pam_limits.so" >> /etc/pam.d/login
        fi
        [ -e /etc/crontab ] || touch /etc/crontab
        echo "*/5 * * * * root bash /root/twistprotect" >> /etc/crontab
    fi
}

function configiptables(){
    if ! grep -qs "Twist" /etc/sysctl.conf; then
        iprables-save > "/etc/twistbackup/iptables.rules"
        iptables-save > "/etc/twistbackup/iptables.rules.old-${date}"
        iptables -I INPUT -m conntrack --ctstate INVALID -j DROP
        iptables -I INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
        iptables -I INPUT -p tcp -m multiport --dports $PORT -j ACCEPT
        iptables -I INPUT -p udp -m multiport --dports $PORT -j ACCEPT
        iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport $PORT -j ACCEPT
        iptables -I INPUT -m state --state NEW -m udp -p udp --dport $PORT -j ACCEPT
        iptables -I FORWARD -m conntrack --ctstate INVALID -j DROP
        iptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        iptables -t nat -A POSTROUTING -o $ETH -j MASQUERADE
        [ -e /etc/ip6tables.rules ] && cp -f "/etc/ip6tables.rules" "/etc/twistbackup/ip6tables.rules"
        [ -e /etc/ip6tables.rules ] && cp -f "/etc/ip6tables.rules" "/etc/twistbackup/ip6tables.rules.old-${date}"
        cat > /etc/ip6tables.rules <<-EOF
*filter
:INPUT ACCEPT [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -m rt --rt-type 0 -j DROP
-A INPUT -s fe80::/10 -j ACCEPT
-A INPUT -p ipv6-icmp -j ACCEPT
-A INPUT -j DROP
COMMIT
EOF
        [ -e /etc/iptables/rules.v6 ] && cp -f "/etc/iptables/rules.v6" "/etc/twistbackup/rules.v6"
        [ -e /etc/iptables/rules.v6 ] && cp -f "/etc/iptables/rules.v6" "/etc/twistbackup/rules.v6.old-${date}"
        [ -e /etc/ip6tables.rules ] && cp -f "/etc/ip6tables.rules" "/etc/iptables/rules.v6"
        iptables-save > "/etc/iptables.rules"
        [ -e /etc/network/if-pre-up.d/iptablesload ] && cp -f "/etc/network/if-pre-up.d/iptablesload" "/etc/twistbackup/iptablesload"
        [ -e /etc/network/if-pre-up.d/iptablesload ] && cp -f "/etc/network/if-pre-up.d/iptablesload" "/etc/twistbackup/iptablesload.old-${date}"
        [ -d /etc/network/if-pre-up.d ] || mkdir -p /etc/network/if-pre-up.d
        if [ "$systemtype" = "0" ]; then
            systemctl start firewalld
            firewall-cmd --permanent --zone=public --add-port=${PORT}/tcp
            firewall-cmd --permanent --zone=public --add-port=${PORT}/udp
            firewall-cmd --reload
            cat > /etc/network/if-pre-up.d/iptablesload <<-EOF
#!/bin/sh

iptables-restore < /etc/iptables.rules
exit 0

EOF
        else
            cat > /etc/network/if-pre-up.d/iptablesload <<-EOF
#!/bin/sh

iptables-restore < /etc/iptables.rules
exit 0

EOF
            [ -e /etc/network/if-pre-up.d/ip6tablesload ] && cp -f "/etc/network/if-pre-up.d/ip6tablesload" "/etc/twistbackup/ip6tablesload"
            [ -e /etc/network/if-pre-up.d/ip6tablesload ] && cp -f "/etc/network/if-pre-up.d/ip6tablesload" "/etc/twistbackup/ip6tablesload.old-${date}"
            cat > /etc/network/if-pre-up.d/ip6tablesload <<-EOF
#!/bin/sh

ip6tables-restore < /etc/ip6tables.rules
exit 0

EOF
        fi
        [ -e /etc/fail2ban/jail.local ] && cp -f "/etc/fail2ban/jail.local" "/etc/twistbackup/jail.local"
        [ -e /etc/fail2ban/jail.local ] && cp -f "/etc/fail2ban/jail.local" "/etc/twistbackup/jail.local.old-${date}"
        [ -e /etc/fail2ban/jail.local ] || echo "" > /etc/fail2ban/jail.local
        [ "$ABB" = "enable" ] && cat >> /etc/fail2ban/jail.local <<-EOF

[ssh-iptables]
enabled = true
filter  = sshd
action  = iptables[name=SSH, port=ssh, protocol=tcp]
logpath = /var/log/auth.log

[ssh-ddos]
enabled = true
filter  = sshd-ddos
action  = iptables[name=ssh-ddos, port=ssh,sftp protocol=tcp,udp]
logpath = /var/log/messages

[osx-ssh-ipfw]
enabled = true
filter  = sshd
action  = osx-ipfw
logpath = /var/log/auth.log

[ssh-apf]
enabled = true
filter  = sshd
action  = apf[name=SSH]
logpath = /var/log/auth.log

[osx-ssh-afctl]
enabled = true
filter  = sshd
action  = osx-afctl
logpath = /var/log/auth.log

[selinux-ssh]
enabled = true
filter  = selinux-ssh
action  = iptables[name=SELINUX-SSH, port=ssh, protocol=tcp]
logpath = /var/log/audit/audit.log

[apache-tcpwrapper]
enabled = true
filter  = apache-auth
action  = hostsdeny
logpath = /var/log/httpd/error_log

[apache-badbots]
enabled = true
filter  = apache-badbots
action  = iptables-multiport[name=BadBots, port="http,https"]
logpath = /var/log/httpd/access_log

[apache-shorewall]
enabled = true
filter  = apache-noscript
action  = shorewall
logpath = /var/log/httpd/error_log

EOF
    elif [ "$OVERWRITE" = "ture" ]; then
        iptables-save > "/etc/twistbackup/iptables.rules.old-${date}"
        iptables -I INPUT -m conntrack --ctstate INVALID -j DROP
        iptables -I INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
        iptables -I INPUT -p tcp -m multiport --dports $PORT -j ACCEPT
        iptables -I INPUT -p udp -m multiport --dports $PORT -j ACCEPT
        iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport $PORT -j ACCEPT
        iptables -I INPUT -m state --state NEW -m udp -p udp --dport $PORT -j ACCEPT
        iptables -I FORWARD -m conntrack --ctstate INVALID -j DROP
        iptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
        iptables -t nat -A POSTROUTING -o $ETH -j MASQUERADE
        iptables-save > "/etc/iptables.rules"
        if [ "$systemtype" = "0" ]; then
            firewall-cmd --permanent --zone=public --add-port=${PORT}/tcp
            firewall-cmd --permanent --zone=public --add-port=${PORT}/udp
            firewall-cmd --reload
        fi
    fi
}

function startservices(){
    if ! grep -qs "Twist" /etc/sysctl.conf; then
        [ -e /etc/rc.local ] && cp -f "/etc/rc.local" "/etc/twistbackup/rc.local"
    fi
    [ -e /etc/rc.local ] && cp -f "/etc/rc.local" "/etc/twistbackup/rc.local.old-${date}"
    [ -e /etc/rc.local ] || echo "#!/bin/bash" > /etc/rc.local
    sed --follow-symlinks -i '/^exit 0/d' /etc/rc.local
    cat >> /etc/rc.local <<-EOF

sysctl -q -p
iptables-restore < /etc/iptables.rules
ip6tables-restore < /etc/ip6tables.rules
service fail2ban restart
EOF
    if [ "$packagemanagertype" = "p" ]; then
        echo "systemctl start cronie.service" >> /etc/rc.local
    else
        echo "systemctl start cron.service" >> /etc/rc.local
    fi
    cat >> /etc/rc.local <<-EOF
rngd -r /dev/urandom

exit 0

EOF
    if [ -f /usr/local/bin/ss-server ]; then
        ssserverpath="/usr/local/bin/ss-server"
    elif [ -f /usr/bin/ss-server ]; then
        ssserverpath="/usr/bin/ss-server"
    elif [ ! -z "$(which ss-server)" ]; then
        ssserverpath="ss-server"
    else
        echo ""
        echo －e "# [\033[31;1mUnable to find shadowsocks-libev Path. Aborting! \033[0m]"
        echo ""
        exit 1
    fi
    [ -d /etc/init.d/shadowsocks ] && rm -rf /etc/init.d/shadowsocks
    echo "#!/bin/bash" > /etc/init.d/shadowsocks
    if [ "$systemtype" = "0" ]; then
        cat >> /etc/init.d/shadowsocks <<-EOF

# chkconfig: 2345 90 10
# description: Start, Stop or Restart Shadowsocks-libev Server
EOF
    fi
    cat >> /etc/init.d/shadowsocks <<-EOF

### BEGIN INIT INFO
# Provides:          Shadowsocks
# Required-Start:    \$network \$local_fs \$remote_fs
# Required-Stop:     \$network \$local_fs \$remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Shadowsocks-libev
# Description:       Shadowsocks-libev Service
### END INIT INFO

exitstatus="0"

if [ ! -d /var/run ]; then
    mkdir -p /var/run
    if [ \$? -ne 0 ]; then
        echo -e "# \033[31;1mStarting Shadowsocks-libev Failed... \033[0m"
        exit 1
    fi
fi

if [ ! -f /etc/shadowsocks-libev/config.json ]; then
    echo -e "# \033[31;1mStarting Shadowsocks-libev Failed... \033[0m"
    exit 1
fi

ssserver_check() {
    if [ -r /var/run/shadowsocks-libev.pid ]; then
        read PID < /var/run/shadowsocks-libev.pid
        if [ -d "/proc/\${PID}" ]; then
            return 0
        else
            rm -f /var/run/shadowsocks-libev.pid
            return 1
        fi
    else
        return 2
    fi
}

ssserver_status() {
    ssserver_check
    case \$? in
        0)
        echo -e "# \033[32;1mShadowsocks-libev is Running... \033[0m"
        ;;
        1|2)
        echo -e "# \033[34;1mShadowsocks-libev is Stopped... \033[0m"
        exitstatus="1"
        ;;
    esac
}

ssserver_start() {
    if ssserver_check; then
        echo -e "# \033[32;1mShadowsocks-libev is Running... \033[0m"
        return 0
    fi
    ${ssserverpath} -uv -c /etc/shadowsocks-libev/config.json -f /var/run/shadowsocks-libev.pid
    [ -e /var/log/twistprotect ] || touch /var/log/twistprotect
    if ssserver_check; then
        echo -e "# \033[32;1mStarting Shadowsocks-libev Success... \033[0m"
    else
        echo -e "# \033[31;1mStarting Shadowsocks-libev Failed... \033[0m"
        exitstatus="1"
    fi
}

ssserver_stop() {
    if ssserver_check; then
        kill -9 \$PID
        rm -f /var/run/shadowsocks-libev.pid
        rm -f /var/log/twistprotect
        echo -e "# \033[32;1mStopping Shadowsocks-libev Success... \033[0m"
    else
        echo -e "# \033[34;1mShadowsocks-libev is Stopped... \033[0m"
        exitstatus="1"
    fi
}

ssserver_restart() {
    ssserver_stop
    ssserver_start
}

case "\$1" in
    start|stop|restart|status)
    ssserver_\${1}
    ;;
    *)
    echo "Usage: \$0 { start | stop | restart | status }"
    exitstatus="1"
    ;;
esac

exit \$exitstatus

EOF
    if ! grep -qs "Twist" /etc/sysctl.conf; then
        [ -e /usr/bin/twist ] && cp -f "/usr/bin/twist" "/etc/twistbackup/twist"
    fi
    cat > /usr/bin/twist <<-EOF
#!/bin/bash

twist_status() {
    echo -e "# [\033[34;1mTWIST Checking Shadowsocks Status...\033[0m]"
    /etc/init.d/shadowsocks status
}

twist_start() {
    echo -e "# [\033[34;1mTWIST Starting Shadowsocks Service...\033[0m]"
    sudo /etc/init.d/shadowsocks start
    /etc/init.d/shadowsocks status
}

twist_stop() {
    echo -e "# [\033[34;1mTWIST Stopping Shadowsocks Service...\033[0m]"
    sudo /etc/init.d/shadowsocks stop
    /etc/init.d/shadowsocks status
}

twist_restart() {
    echo -e "# [\033[34;1mTWIST Restarting Shadowsocks Service...\033[0m]"
    sudo /etc/init.d/shadowsocks restart
    /etc/init.d/shadowsocks status
}

twist_custom() {
    echo -e "# [\033[34;1mTWIST Loading Shadowsocks Configuration...\033[0m \033[32;1mnano\033[0m \033[32;1mEditor\033[0m]"
    sleep 2
    sudo nano /etc/shadowsocks-libev/config.json
    sudo /etc/init.d/shadowsocks restart
    /etc/init.d/shadowsocks status
}

twist_update() {
    echo -e "# [\033[34;1mTWIST Preparing Update...\033[0m]"
    sleep 2
    sudo wget https://raw.githubusercontent.com/Unbinilium/Twist/master/twist -O twist.sh && chmod -x twist.sh && bash twist.sh update && rm twist.sh
}

twist_uninstall() {
    echo -e "# [\033[31;1mTWIST Preparing Uninstallation...\033[0m]"
    sleep 2
    sudo wget https://raw.githubusercontent.com/Unbinilium/Twist/master/twist -O twist.sh && chmod -x twist.sh && bash twist.sh uninstall && rm twist.sh
}

case "\$1" in
    status|start|stop|restart|custom|update|uninstall)
    twist_\${1}
    ;;
    *)
    echo "Usage: \$0 { status | start | stop | restart | custom | update | uninstall }"
    ;;
esac

EOF
    if ! grep -qs "Twist" /etc/sysctl.conf; then
        [ -e /root/twistprotect ] && cp -f "/root/twistprotect" "/etc/twistbackup/twistprotect"
    fi
    cat > /root/twistprotect <<-EOF
#!/bin/bash

date="\$(date +%Y-%m-%d-%H:%M:%S)"
echo -e "# [\033[34;1mTWIST Protecting Shadowsocks Services\033[0m \033[32;1m/var/log/twistprotect\033[0m]"

twistprotectenable() {
    echo -e "# \033[32;1mTWIST Protecting Shadowsocks Services Enabled \033[0m"
    echo -e "# \${date} TWIST Protecting Shadowsocks Services Enabled " >> /var/log/twistprotect
    status=\$(ps -ef | grep -v grep | grep -i "${ssserverpath}" | awk '{print \$2}')
    if [ -z \$status ]; then
        echo -e "# \033[31;1mShadowsocks-libev Stopped Detected... \033[0m"
        echo -e "# \${date} Shadowsocks-libev Stopped Detected " >> /var/log/twistprotect
        /etc/init.d/shadowsocks start || echo "# \${date} Shadowsocks-libev Unable to Run " >> /var/log/twistprotect
    else
        echo -e "# \033[32;1mShadowsocks-libev Running Detected... \033[0m"
        echo -e "# \${date} Shadowsocks-libev Running Detected " >> /var/log/twistprotect
    fi
}

if [ -e /var/log/twistprotect ]; then
	twistprotectenable
else
    echo -e "# \033[31;1mTWIST Protecting Shadowsocks Services Disabled \033[0m"
fi

EOF
    chmod +x /etc/rc.local
    chmod +x /etc/init.d/shadowsocks
    chmod +x /usr/bin/twist
    chmod +x /root/twistprotect
    chmod +x /etc/network/if-pre-up.d/iptablesload
    chmod +x /etc/network/if-pre-up.d/ip6tablesload
    if [ "$systemtype" = "1" ]; then
        update-rc.d -f shadowsocks defaults
    else
        chkconfig --add shadowsocks
        chkconfig shadowsocks on
        systemctl --now mask firewalld
    fi
    systemctl enable iptables fail2ban
    if [ "$packagemanagertype" = "p" ]; then
        systemctl enable cronie.service
        systemctl start cronie.service
    else
        systemctl enable cron.service
        systemctl start cron.service
    fi
    iptables-restore < /etc/iptables.rules
    ip6tables-restore < /etc/ip6tables.rules
    sysctl -p
    ldconfig
    if [ "$FWS" = "enable" ]; then
        a2enmod ssl rewrite
        if ! grep -qs "Twist" /etc/sysctl.conf; then
            [ -e /var/www/html/.htaccess ] && cp -f "/var/www/html/.htaccess" "/etc/twistbackup/.htaccess"
            [ -e /var/www/html/index.html ] && cp -f "/var/www/html/index.html" "/etc/twistbackup/index.html"
        fi
        rm -f /var/www/html/.htaccess && echo "" > /var/www/html/.htaccess
        cat >> /var/www/html/.htaccess <<-EOF
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteCond %{HTTP_HOST} ^$(echo $PUBLICIP | cut -d'.' -f1)\.$(echo $PUBLICIP | cut -d'.' -f2)\.$(echo $PUBLICIP | cut -d'.' -f3)\.$(echo $PUBLICIP | cut -d'.' -f4)
RewriteRule (.*) http://${OBFSHOST}/\$1 [R=301,L]
</IfModule>
EOF
        rm -f /var/www/html/index.html && echo "" > /var/www/html/index.html
        cat >> /var/www/html/index.html <<-EOF
<head><meta http-equiv="refresh" content="0;url=http://${OBFSHOST}"></head>
EOF
        systemctl restart apache2
    fi
    service fail2ban restart
    rngd -r /dev/urandom
    sleep 2
    /etc/init.d/shadowsocks start
    echo ""
    sleep 2
}

function twiststatus(){
    clear
    twist
    echo -e "                            [\033[32;1mInstall Complete\033[0m]"
    echo -e "        [\033[32;1mPlease Press Enter to Show Connect Infomation and EXIT\033[0m]"
    echo -e "########################################################################"
    read -p ""
    echo "ss://$(echo -n "${METHOD}:${PASSWORD}@${PUBLICIP}:${PORT}?plugin=obfs-local;obfs-host=${OBFSHOST};obfs-uri=${OBFSURI};obfs=${OBFS}#Twist" | base64 -w 0)" | qr
    echo -e "# [\033[32;1mss://\033[0m\033[34;1m$(echo -n "${METHOD}:${PASSWORD}@${PUBLICIP}:${PORT}?plugin=obfs-local;obfs-host=${OBFSHOST};obfs-uri=${OBFSURI};obfs=${OBFS}#Twist" | base64 -w 0)\033[0m]"
    echo -e "# [\033[32;1mServer IP:\033[0m \033[34;1m${PUBLICIP}\033[0m\c"
    [ ! "$AddrV6" = "false" ] && echo -e "(\033[34;1m${PUBLICIPv6}\033[0m)\c"
    echo -e " \033[32;1mPassWord:\033[0m \033[34;1m${PASSWORD}\033[0m \033[32;1mEncryption:\033[0m \033[34;1m${METHOD}\033[0m \033[32;1mOBFS:\033[0m \033[34;1m${OBFS}\033[0m \033[32;1mOBFS-HOST:\033[0m \033[34;1m${OBFSHOST}\033[0m \033[32;1mOBFS-URI:\033[0m \033[34;1m${OBFSURI}\033[0m \033[32;1mLOCALHOST:\033[0m \033[34;1m${LOACL}:${LOCALPORT}\033[0m]"
    if [ "$serverrestart" = "true" ]; then
        echo -e "# [\033[31;1mThe Server Requires Restart to Finish Installation, Please Press Enter to Reboot! \033[0m]"
        read -p ""
        sleep 3
        reboot
    fi
}

action="$1"
[ -z "$1" ] && action="install"
case "$action" in
    install|update|uninstall)
    ${action}_twist
    ;;
    *)
    echo "Usage: $0 { install | update | uninstall }"
    ;;
esac
